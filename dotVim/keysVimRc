set wildcharm=<C-z>

" ==============================================================================
" Normal
" ==============================================================================
"totally annoying default mapping for cap k
nmap K <nop>

" Avoid unintentional switches to Ex mode.
nmap Q q

" Huge saver! Why do you need to press shift when executing a command?
" nnoremap ; :

" clear search highlights on esc
nnoremap <silent> <esc>  :nohlsearch<return><esc>

" Repeat last macro if in a normal buffer.
nnoremap <expr> <CR> empty(&buftype) ? '@@' : '<CR>'


" Window and split navigation
map <C-j> <c-w>j
map <C-k> <c-w>k
map <C-l> <c-w>l
map <C-h> <c-w>h
nmap <c-Tab> :tabnext<Cr>
nmap <c-S-Tab> :tabprev<Cr>
nmap <D->> :vertical resize +10<CR>
nmap <D-<> :vertical resize -10<CR>

" When in diff mode - Command-Shift-J/K move to next change in diff.
nmap <D-K> [c
nmap <D-J> ]c

" Cursor keys to navigate errors
nnoremap <silent> <Up> :cprevious<CR>
nnoremap <silent> <Down> :cnext<CR>
nnoremap <silent> <Left> :cpfile<CR>
nnoremap <silent> <Right> :cnfile<CR>

" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : '') . 'j'

" Like vim-vinegar.
nnoremap <silent> - :silent edit <C-R>=empty(expand('%')) ? '.' : fnameescape(expand('%:p:h'))<CR><CR>

" Move up a directory using "-" like vim-vinegar (usually "u" does this).
" nmap <buffer> <expr> - g:NERDTreeMapUpdir


nnoremap <D-b> :CtrlPBuffer<CR>

"Tcomment
nmap <D-/> gcc


" Make S always delete until the point where you'd want to start typing -
" with some indent plugins, or settings the desired behavior is lost - this
" restores it. (Doesn't always work - looking for better solution)
nmap S ddO

" Quick global shortcuts for toggling the location list or quickfix list
" TODO: Use overlay for this as well.
nmap <script> <silent> <D-r> :call ToggleLocationList()<CR>
nmap <script> <silent> <D-R> :call ToggleQuickfixList()<CR>


" Rename complete word in file
nnoremap <expr> <c-s> ':%s/\<'.expand('<cword>').'\>/'.expand('<cword>').'/g<Left><Left>'

" This allows you to stand anywhere on the token to replace, press "c>", print new token and then hit "." happily after that to replace next occurrence or "n" to skip unneeded
nnoremap c> *Ncgn

" open file in vertical split
nnoremap gvf :vertical wincmd f<CR>



" custom function to format current buffer
nmap <D-M> :call Preserve("normal gg=G")<CR>


" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" bind K to grep word under cursor
nmap <silent> K :Ag! "<cword>" <CR>

" CamelCase
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" EasyMotion
" nmap s <Plug>(easymotion-s)
" nmap S <Plug>(easymotion-bd-w)

" MacVimSmartGUITabs
map <D-Cr> :SmartGUITabsToggleFullScreen<CR>
nmap <D-Cr> <Esc>:SmartGUITabsToggleFullScreen<CR>

"SmoothScroll
noremap <silent> <c-u> :call smooth_scroll#up(40, 20, 6)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(40, 20, 6)<CR>

" Uncomment a line; mirrors gcc (which comments/toggles a line).
nmap guu <Plug>TComment_Uncommentc


" re-open the window you just quit (like browser tabs)
map <D-T> <Esc>:Undoquit<CR>






" ==============================================================================
" Visual
" ==============================================================================
"Tcomment
vmap <D-/> <c-_><c-_>
" vmap <D-s-/> <c-_>b

" Awesome visual selection maintained when indenting.
vmap <D-]> >gv
vmap <D-[> <gv


" EasyMotion
" vmap s <Plug>(easymotion-s)
" vmap S <Plug>(easymotion-bd-w)


" EasyAlign
vmap <Enter> <Plug>(EasyAlign)


" ExpandRegion
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" smooth_scroll is broken in visual mode currently - unmap
vnoremap <silent> <c-u> <c-u>
vnoremap <silent> <c-d> <c-d>


" ==============================================================================
" Insert
" ==============================================================================
imap <C-j> <esc>Ji
imap <C-o> <Esc>O
imap <S-Enter> <End><Cr>

"Emacs keybindings while inserting.
imap <C-k> <space><Esc>Da
imap <C-a> <Esc>I
map! <c-e> <End>
map! <c-f> <Right>
map! <c-b> <Left>
map! <c-d> <Delete>
"noremap! <M-b> <S-Left>
"noremap! <M-f> <S-Right>
" noremap! <c-n> <Down>
" noremap! <c-p> <Up>
inoremap <c-g> <c-p>

" Window and split navigation
imap <c-Tab> <Esc>:tabnext<Cr>
imap <c-S-Tab> <Esc>:tabprev<Cr>
imap <D->> <Esc>:vertical resize +10<CR>
imap <D->> <Esc>:vertical resize +10<CR>

" Since it makes sense to make c-d match the mac ox/emacs style forward
" delete, c-d can't be (shift left in insert mode). Given that, we can
" make a better mac os x combo for indenting and unindenting in insert
" mode. That frees up c-t
inoremap <D-]> <c-t>
inoremap <D-[> <c-d>

" MacVimSmartGUITabs
imap <D-Cr> <Esc>:SmartGUITabsToggleFullScreen<CR>





" ==============================================================================
" Command Line
" ==============================================================================
" Need to map these once more for inc-search to work
cmap <c-a> <Home>
cmap <c-e> <End>
cmap <c-f> <Right>
cmap <c-b> <Left>
cmap <c-d> <Delete>



" `<Tab>`/`<S-Tab>` to move between matches without leaving incremental search.
" Note dependency on `'wildcharm'` being set to `<C-z>` in order for this to
" work.
cnoremap <expr> <Tab> getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<CR>/<C-r>/' : '<C-z>'
cnoremap <expr> <S-Tab> getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<CR>?<C-r>/' : '<S-Tab>'






" ==============================================================================
" Leader
" ==============================================================================
let mapleader = "\<Space>"
let maplocalleader = ","

noremap <leader>a :Ag! -Q <C-r>=expand('<cword>')<CR><CR>
nnoremap <Leader>o :CtrlP<CR>

nmap <Leader>a <Plug>(EasyAlign)
" nnoremap <Leader>/ :LustyBufferGrep<CR>

" open file under cursor
nmap <Leader>f :CtrlP<CR><C-\>w

" <Leader>p -- Show the path of the current file (mnemonic: path; useful when
" you have a lot of splits and the status line gets truncated).
nnoremap <Leader>p :echo expand('%')<CR>

" <Leader>pp -- Like <Leader>p, but additionally yanks the filename and sends it
" off to Clipper.
" nnoremap <Leader>pp :let @0=expand('%') <Bar> :Clip<CR> :echo expand('%')<CR>

" <LocalLeader>c -- Fix (most) syntax highlighting problems in current buffer
" (mnemonic: coloring).
nnoremap <silent> <Leader>c :syntax sync fromstart<CR>

nmap <Leader>s <Plug>(Scalpel)

" <LocalLeader>e -- Edit file, starting in same directory as current file.
" nnoremap <Leader>e :edit <C-R>=expand('%:p:h') . '/'<CR>

" Git
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gp :Gpush<CR>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>


" ==============================================================================
" Cross-Domain
" ==============================================================================
if has("gui_running")
  if has("gui_macvim")
    map <D-e> :NERDTreeToggle<Cr><c-w><c-w><c-w><c-p>
    imap <D-e> <Esc>:NERDTreeToggle<Cr><c-w><c-w><c-w><c-p>
    vmap <D-e> <Esc>:NERDTreeToggle<Cr><c-w><c-w><c-w><c-p>
    nmap <D-e> <Esc>:NERDTreeToggle<Cr><c-w><c-w><c-w><c-p>

    map <D-E> :NERDTreeFind<Cr><c-w><c-w><c-w><c-p>
    imap <D-E> <Esc>:NERDTreeFind<Cr><c-w><c-w><c-w><c-p>
    vmap <D-E> <Esc>:NERDTreeFind<Cr><c-w><c-w><c-w><c-p>
    nmap <D-E> <Esc>:NERDTreeFind<Cr><c-w><c-w><c-w><c-p>
  endif
endif
