" Overwrite this file with whatever you want. This will be executed after
" loading any of the stock bundles/settings.

set regexpengine=1
syntax enable

"
" set background=light
" colorscheme solarizedLight

let mapleader = "\<Space>"
let maplocalleader = ","

let g:flow#enable = 0
" let g:flow#autoclose = 1
let g:syntastic_javascript_checkers = ['eslint']


" https://github.com/scrooloose/syntastic/issues/1649
"let g:syntastic_syntastic_javascript_flow_exe = 'flow check'

" let g:syntastic_javascript_checkers = ['flow', 'eslint']

let g:syntastic_javascript_eslint_exec = 'eslint_d'
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

nnoremap <Leader>o :CtrlP<CR>
nnoremap <D-b> :CtrlPBuffer<CR>

" This allows you to stand anywhere on the token to replace, press "c>", print new token and then hit "." happily after that to replace next occurrence or "n" to skip unneeded
nnoremap c> *Ncgn

map <silent> <Leader>w <Plug>CamelCaseMotion_e
map <silent> <leader>b <Plug>CamelCaseMotion_b

set hidden
set cursorline
set colorcolumn=121
" set relativenumber
"

nmap s <Plug>(easymotion-s)
vmap s <Plug>(easymotion-s)

nmap S <Plug>(easymotion-bd-w)
vmap S <Plug>(easymotion-bd-w)

nmap <Leader>a <Plug>(EasyAlign)
nnoremap <Leader>/ :LustyBufferGrep<CR>

" open file under cursor
nmap <leader>f :CtrlP<CR><C-\>w

" https://robots.thoughtbot.com/faster-grepping-in-vim
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
 let g:ctrlp_use_caching = 0
endif


" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

"nnoremap \ :AgFromSearch<CR>

" bind K to grep word under cursor
"nnoremap K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>
noremap <leader>a :Ag! -Q <C-r>=expand('<cword>')<CR><CR>

nmap  <silent> K :Ag! "<cword>" <CR>

"nmap  <silent> <D-f> :Ag "def <cword>" /any/path/<CR>

function! ToggleNumbersOn()
    set nu!
    set rnu
endfunction
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction



" open file in vertical split
nnoremap gvf :vertical wincmd f<CR>


"EASYMOTION
" map  / <Plug>(easymotion-sn)
" omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
"map  n <Plug>(easymotion-next)
"map  N <Plug>(easymotion-prev)




"Override vimbox defaults for ctrl+p
" Exact same mappings as non-win32 but with D-c Replaced with AHK shift+F7
if has("gui_win32")
  " See https://github.com/kien/ctrlp.vim/issues/389
    let g:ctrlp_prompt_mappings = {
          \ 'CreateNewFile()':      [''],
          \ 'ToggleType(1)':        ['<c-u>', '<c-up>'],
          \ 'ToggleType(-1)':       ['<c-y>', '<c-down>'],
          \ 'PrtCurLeft()':         ['<c-b>', '<left>', '<c-^>'],
          \ 'PrtCurRight()':        ['<c-f>', '<right>'],
          \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
          \ 'AcceptSelection("h")': ['<c-v>'],
          \ 'AcceptSelection("v")': ['<c-s>'],
          \ 'AcceptSelection("t")': ['<c-t>'],
          \ 'PrtClearCache()':      ['<M-C>'],
          \ 'PrtDeleteEnt()':       ['<F7>'],
          \ 'PrtExit()':            ['<c-l>', '<esc>', '<c-c>', '<c-g>'],
          \ }
else
  " See https://github.com/kien/ctrlp.vim/issues/389
    let g:ctrlp_prompt_mappings = {
          \ 'CreateNewFile()':      [''],
          \ 'ToggleType(1)':        ['<c-u>', '<c-up>'],
          \ 'ToggleType(-1)':       ['<c-y>', '<c-down>'],
          \ 'PrtCurLeft()':         ['<c-b>', '<left>', '<c-^>'],
          \ 'PrtCurRight()':        ['<c-f>', '<right>'],
          \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
          \ 'AcceptSelection("h")': ['<c-v>'],
          \ 'AcceptSelection("v")': ['<c-s>'],
          \ 'AcceptSelection("t")': ['<c-t>'],
          \ 'PrtClearCache()':      ['<D-C>'],
          \ 'PrtDeleteEnt()':       ['<F7>'],
          \ 'PrtExit()':            ['<c-l>', '<esc>', '<c-c>', '<c-g>'],
          \ }

endif




" let NERDTreeHijackNetrw=1
