" Make sure you use single quotes
call plug#begin('~/.vim/plugged')

" ==============================================================================
" Editor
" ==============================================================================
Plug 'jordwalke/VimCleanColors'       " Colorschemes
Plug 'tpope/vim-sensible'             " Sensible defaults
Plug 'jordwalke/VimAutoMakeDirectory' " Make directory if needed
Plug 'jordwalke/VimCloser'            " Go to Left when closing like everything else in the world
Plug 'AndrewRadev/undoquit.vim'       " Re-open a quit window (like browser tabs)

" Highlight whitespace
Plug 'ntpeters/vim-better-whitespace'

" Add :Bdelete command to close buffer without changing layout.
Plug 'moll/vim-bbye'

" Single command for grabbing then swapping windows.
Plug 'wesQ3/vim-windowswap'

" Make sure to have `set guioptions+=e` in your `.gvimrc`.
Plug 'jordwalke/MacVimSmartGUITabs'

Plug 'milkypostman/vim-togglelist'
let g:toggle_list_copen_command="bo copen 30"
let g:toggle_list_lopen_command="bo copen 30"

Plug 'scrooloose/nerdtree'
"  Close vim if the only window left
" open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" like vim-vinegar
let g:NERDTreeMapUpdir = '-'

" move up, but keep current dir expanded
let g:NERDTreeMapUpdirKeepOpen = 'u'

" Ignore turds left behind by Mercurial.
let g:NERDTreeIgnore=['\.orig']

" The default of 31 is just a little too narrow.
let g:NERDTreeWinSize=40

" Disable display of '?' text and 'Bookmarks' label.
let g:NERDTreeMinimalUI=1

" Let <Leader><Leader> (^#) return from NERDTree window.
let g:NERDTreeCreatePrefix='silent keepalt keepjumps'

" show hidden files by default
let g:NERDTreeShowHidden=1

" Single-click to toggle directory nodes, double-click to open non-directory
" nodes.
let g:NERDTreeMouseMode=2

if has('autocmd')
  augroup WincentNERDTree
    autocmd!
    autocmd User NERDTreeInit call autocmds#attempt_select_last_file()
  augroup END
endif

" ==============================================================================
" Themes
" ==============================================================================
Plug 'altercation/vim-colors-solarized'

" Plug 'chriskempson/base16-vim'
" Plug 'mhartington/oceanic-next'
" syntax enable
" set t_Co=256
" colorscheme OceanicNext
" set background=dark
"
" let g:airline_theme='oceanicnext'
" " enable italics, disabled by default
" let g:oceanic_next_terminal_italic = 1
"
" " enable bold, disabled by default
" let g:oceanic_next_terminal_bold = 1

" Plug 'bcicen/vim-vice'
" colorscheme vice

" Plug 'jnurmine/Zenburn'

" Plug 'w0ng/vim-hybrid'
" let g:hybrid_custom_term_colors = 1
" let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.

" Plug 'quanganhdo/grb256'

" Plug 'daylerees/colour-schemes', { 'rtp': 'vim' }





" ==============================================================================
" Session
" ==============================================================================

" Start screen and improved session management.
"Plug 'mhinz/vim-startify'

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
" let g:session_autosave_periodic = 0  "Every three minutes + on close seems fine.
" But saving resets window dims!
let g:session_autosave = 'yes'       "Auto-save on close
let g:session_autoload = 'no'

" Make sure to save sessions outside of your dotfiles in case you publish your
" dotfiles to github etc.
" The Session Directory
let g:session_directory="~/vim_sessions"

" My custom session management GUI tools (in menu bar) Based on one of the
" other session managers.
set runtimepath+=~/.vim/localBundle/sessions
" set runtimepath+=~/.vim/localBundle/wowcamldebug




" ==============================================================================
" Airline - A lighterweight Powerline
" ==============================================================================
Plug 'jordwalke/vim-airline'
if has("gui_macvim") || has("gui_vimr")
  autocmd VimEnter * set guioptions+=e
endif
let g:airline_powerline_fonts = 1

let g:airline#extensions#branch#enabled = 0
"let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline_section_y = ''

set laststatus=2
" Disable truncation
let g:airline#extensions#default#section_truncate_width = {}





" ==============================================================================
" Editing
" ==============================================================================
Plug 'tpope/vim-repeat'                   " Dot operator for extensions
Plug 'tpope/vim-surround'                 " Edit surround
Plug 'tomtom/tcomment_vim'                " Commenter
Plug 'junegunn/vim-easy-align'            " Align lines based on a character
Plug 'vim-scripts/YankRing.vim'           " Like Emacs' yankring
Plug 'vim-scripts/Parameter-Text-Objects' " Defines Parameter as a Text Object `viP`
Plug 'sickill/vim-pasta'                  " Paste with indentation
" Plug 'tpope/vim-commentary'               " Commenting with motion commands
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-abolish'                  " Auto-correct spelling of some words
Plug 'MartinLafreniere/vim-PairTools'     " Auto-close pair, like ()
autocmd FileType javascript let g:pairtools_javascript_tagwrenchhook = 'tagwrench#BuiltinHTML5Hook'
autocmd FileType javascript let g:pairtools_javascript_twexpander = 1
autocmd FileType javascript let g:pairtools_javascript_tweraser   = 1
autocmd FileType javascript let g:pairtools_javascript_tagwrench = 1
autocmd FileType javascript let g:pairtools_javascript_apostrophe = 0
autocmd FileType javascript let g:pairtools_javascript_jigsaw    = 1

Plug 'mtth/scratch.vim'
" :Scratch
" gs - open scratch window in insert mode. Pastes what is already selected.

Plug 'mbbill/undotree'
" <Space>u - open undoTree

" leader<e> in Normal mode to 'edit' word, and replace it throughout file
Plug 'wincent/scalpel'

" ==============================================================================
" Git
" ==============================================================================

" Show git changes in gutter.
Plug 'airblade/vim-gitgutter'

" Git command helpers (:G*)
Plug 'tpope/vim-fugitive'

Plug 'gregsexton/gitv'
"Neither of these two commands seem to do what I want
let g:Gitv_OpenHorizontal = 1
let g:Gitv_WipeAllOnClose = 1
let g:Gitv_DoNotMapCtrlKey = 1




" ==============================================================================
" Window Management
" ==============================================================================
Plug 'jordwalke/VimSplitBalancer'



" ==============================================================================
" Movement
" ==============================================================================
Plug 'bkad/CamelCaseMotion'

" For custom text objects, needed for all vim-textobj plugins.
Plug 'kana/vim-textobj-user'

" Variable (CamelCase or underscore) segment text object (iv / av).
Plug 'Julian/vim-textobj-variable-segment'

" Comment text object (ic / ac / aC)
"Plug 'glts/vim-textobj-comment'

" Entire buffer text object (ie / ae).
"Plug 'kana/vim-textobj-entire'

" HTML/XML attribute text object (ix / ax).
Plug 'whatyouhide/vim-textobj-xmlattr'

Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-expand-region'
Plug 'terryma/vim-smooth-scroll'
Plug 'vim-scripts/matchit.zip'            " enhances % command to jump to corresponding html tags
Plug 'tpope/vim-rsi'                      " Readline key bindings for Vim (C-a, C-e etc.).
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

Plug 'wincent/loupe'
" :h g:incsearch#auto_nohlsearch
" set hlsearch
" let g:incsearch#auto_nohlsearch = 1
" map n  <Plug>(incsearch-nohl-n)
" map N  <Plug>(incsearch-nohl-N)
" map *  <Plug>(incsearch-nohl-*)
" map #  <Plug>(incsearch-nohl-#)
" map g* <Plug>(incsearch-nohl-g*)
" map g# <Plug>(incsearch-nohl-g#)

Plug 'justinmk/vim-sneak'



" ==============================================================================
" Searching
" ==============================================================================
Plug 'gabesoft/vim-ags'
Plug 'rking/ag.vim'
Plug 'wincent/ferret' " Search and Replace in project

" This plugin allows you to select some text using Vim's visual mode, then hit * and # to search for it elsewhere in the file.
Plug 'bronson/vim-visual-star-search'



" ==============================================================================
" Javascript & React
" ==============================================================================
Plug 'pangloss/vim-javascript', { 'branch': 'develop' }

" Plug 'othree/javascript-libraries-syntax.vim'
" let g:used_javascript_libs = 'underscore,react'

Plug 'samuelsimoes/vim-jsx-utils'

Plug 'vim-scripts/HTML-AutoCloseTag'

" Highlight matching tag
"Plug 'Valloric/MatchTagAlways'

"Plug 'vim-scripts/closetag.vim'
"Plug 'alvan/vim-closetag'
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0




" ==============================================================================
" Other syntaxes
" ==============================================================================
Plug 'tpope/vim-markdown'
Plug 'elzr/vim-json'
au BufRead,BufNewFile *.json set filetype=json
let g:syntastic_json_checkers=['jsonlint']






" ==============================================================================
" Project Config
" ==============================================================================
Plug 'tpope/vim-projectionist'
Plug 'embear/vim-localvimrc'
let g:localvimrc_ask = 0





" ==============================================================================
" CtrlP
" ==============================================================================
Plug 'ctrlpvim/ctrlp.vim'
" set splitright
""jump to existing buffer on ANY open command (split/tab/etc).
" let g:ctrlp_switch_buffer="ETVH"
"" search anything (in files, buffers and MRU files at the same time.)
" let g:ctrlp_cmd = 'CtrlPMixed'
"
" Open ctrlp with cmd+p
let g:ctrlp_map = '<D-p>'
"search for nearest ancestor like .git, .hg, else the directory of the current file
let g:ctrlp_working_path_mode = 'a'
" show the match window at the top of the screen
let g:ctrlp_match_window_bottom = 1
" maxiumum height of match window
" See other match window setting
" let g:ctrlp_max_height = 10
let g:ctrlp_match_window = 'bottom,order:btt,min:13,max:13'
" enable caching
let g:ctrlp_use_caching = 1

"" speed up by not removing clearing cache evertime
" let g:ctrlp_clear_cache_on_exit=0

" show me dotfiles
let g:ctrlp_show_hidden = 1
" number of recently opened files
let g:ctrlp_mruf_max = 250
let g:ctrlp_max_depth = 7
let g:ctrlp_max_files = 30000

Plug 'tacahiroy/ctrlp-funky'          " :CtrlPFunky function navigator for ctrlp.vim
"Plug 'ivalkeen/vim-ctrlp-tjump'      " tag navigator for ctrlp.vim
Plug 'sgur/ctrlp-extensions.vim'      " :CtrlPCmdline, :CtrlPYankring, :CtrlPMenu

" https://robots.thoughtbot.com/faster-grepping-in-vim
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
 let g:ctrlp_use_caching = 0
endif




" ==============================================================================
" YouCompleteMe & UltiSnips
" ==============================================================================
" from http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme
Plug 'ervandew/supertab'

" Autocompletion.
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'SirVer/ultisnips'
if has('gui_win32')
  let g:UltiSnipsSnippetsDir=$HOME
  let g:UltiSnipsSnippetDirectories=["myUltiSnippets"]
else
  let g:UltiSnipsSnippetsDir="~/.vim"
  let g:UltiSnipsSnippetDirectories=["myUltiSnippets"]
endif

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"




" ==============================================================================
" Syntastic
" ==============================================================================
Plug 'scrooloose/syntastic'
Plug 'mtscout6/syntastic-local-eslint.vim'
let g:syntastic_enable_signs=1
let g:syntastic_always_populate_loc_list=1
let g:syntastic_loc_list_height=15
let g:syntastic_javascript_checkers=['eslint']
" let g:syntastic_javascript_checkers = ['flow', 'eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
"
" https://github.com/scrooloose/syntastic/issues/1649
"let g:syntastic_syntastic_javascript_flow_exe = 'flow check'

" Add plugins to &runtimepath
call plug#end()
